#include "main.h"

#define PI 3.14

#define A_R 16384.0 // 32768/2
#define G_R 131.0 // 32768/250
#define RAD_TO_DEG 57.2


void i2c_init(void);
static uint8_t SystemClock_Config(void);

int angle(int);
float map(float, float, float, float, float);
void kinematic_bascule(uint16_t);
void MAE(void);

uint16_t A;
uint16_t B;
uint16_t C;
uint16_t D;
uint16_t i;

uint8_t	  rx_dma_buffer[16];
uint8_t	  rx_dma_buffer_bis[16];
uint16_t data;
uint8_t	  irq;

uint16_t consigne_B;
uint16_t consigne_T;

uint16_t inclinaison;
uint16_t torsion;

uint8_t timebase_irq;


uint8_t ETAT;

uint8_t MODE;

float Acc[2];
float Gy[3];
float Angle[3];

int16_t AcX, AcY, AcZ, GyX, GyY, GyZ;

float dt;

float roll,pitch,yaw;

int main(void)

{
	uint8_t		tx_data[2];
	uint8_t		rx_data[6];
	
	consigne_B = 1500;
	consigne_T = 1500;

	inclinaison = 1500;

	dt = 4/1000;
	
	kinematic_bascule(1500);
	kinematic_torsion(1500);
	ETAT = 0;
	MODE = 1;

	SystemClock_Config();

	uart_init();
	servo_init();
	BSP_TIMER_Timebase_Init();
	BSP_LED_Init();
	BSP_I2C1_Init();
	BSP_MPU6050_init();
	BSP_NVIC_Init();

	// Initialize Debug Console
	BSP_Console_Init();

	my_printf("\r\n Robot Ready!\r\n");

	while(1)
	{
		//read accel data
		BSP_I2C1_Read(0x68,0x3B,rx_data,6);

		AcX = (rx_data[0]<<8 | rx_data[1]);
		AcY = (rx_data[2]<<8 | rx_data[3]);
		AcZ = (rx_data[4]<<8 | rx_data[5]);

		//read gyro data
		BSP_I2C1_Read(0x68,0x43,rx_data,6);

		GyX = (rx_data[0]<<8 | rx_data[1]);
		GyY = (rx_data[2]<<8 | rx_data[3]);
		GyZ = (rx_data[4]<<8 | rx_data[5]);

		Gy[0] = GyX/G_R;
		Gy[1] = GyY/G_R;
		Gy[2] = GyZ/G_R;

		Acc[1] = atanf(-1*(AcX/A_R)/sqrtf(powf((AcY/A_R),2) + powf((AcZ/A_R),2)))*RAD_TO_DEG;
		Acc[0] = atanf((AcY/A_R)/sqrtf(powf((AcX/A_R),2) + powf((AcZ/A_R),2)))*RAD_TO_DEG;

		//final data
		roll = 0.97 *(roll+Gy[0]*dt) + 0.03*Acc[0];
		pitch = 0.97 *(pitch+Gy[1]*dt) + 0.03*Acc[1];
		yaw = yaw + Gy[2]*4/1000;

		/*
		 * Check state
		 */
		if((MODE == 0)&&(timebase_irq == 1))
		{
			kinematic_bascule(inclinaison); //auto
			kinematic_torsion(torsion);
			MAE();
			timebase_irq = 0;
		}
		else
		{
			consigne = (uint16_t)map(-90,90,1000,2000);
			kinematic_bascule(inclinaison); //manu
		}

		/*
		 * END process state
		 */

		/*
		 * Bluetooth data receive and process
		 */
		if(irq==1){
			//disable USART
			USART1->CR1 &= ~USART_CR1_UE;

			//check SOF bytes
			if(rx_dma_buffer[0]=='S') //0x41
			{
				//check command bytes
				if(rx_dma_buffer[1]=='B') //Go Foward // 58
				{
					consigne_B = (rx_dma_buffer[2]-'0')*1000 + (rx_dma_buffer[3]-'0')*100 + (rx_dma_buffer[4]-'0')*10 + (rx_dma_buffer[5]-'0')*1;
					//kinematic_bascule(data);
					my_printf("\r\n consigne_B X = %d\r\n",consigne_B);
				}
				else if(rx_dma_buffer[1]=='E') //force states //45
				{
					ETAT = rx_dma_buffer[2]-'0';
					my_printf("\r\n ETAT = %d\r\n",ETAT);
				}
				else if(rx_dma_buffer[1]=='M') //force states //4d
				{
					MODE = rx_dma_buffer[2]-'0';
				}
				else //Stop everything
				{

					my_printf("\r\n Stop \r\n");
				}
			}
			else
			{
				my_printf("\r\n Wrong data!\r\n");

			}

			// Make sure DMA1 channel 5 is disabled
			while ( (DMA1_Channel5->CCR & DMA_CCR_EN) != 0)
			{
				DMA1_Channel5->CCR &= ~DMA_CCR_EN;
			}

			// Number of data items to transfer
			DMA1_Channel5->CNDTR = 16;

			// Enable DMA1 channel 5
			DMA1_Channel5->CCR |= DMA_CCR_EN;

			// Enable USART2
			USART1->CR1 |= USART_CR1_UE;

			irq = 0;
		}
		/*
		 * END BT
		 */
		 delay_ms(4);
	}
}

void MAE(void){
	switch(ETAT){

	case 0:
		consigne_B = 1500;
		TIM3->CCR4 = 1500;
		TIM3->CCR3 = 1500;
		break;

	case 1:	//bascule
		consigne_B = 1750;
		if(inclinaison == consigne_B){
			ETAT = 2;
		}
		break;

	case 2: //pas avant
		consigne_T = 1350;

		if(torsion == consigne_T){
			ETAT = 3;
		}
		break;

	case 3: //bascule
		consigne_B = 1250;
		if(inclinaison == consigne_B){
			ETAT = 4;
		}
		break;

	case 4: //pas avant
		consigne_T = 1650;

		if(torsion == consigne_T){
			ETAT = 1;
		}
		break;


	default:
		ETAT = 0;
		break;
	}
}


void kinematic_torsion(uint16_t inclinaison_pulse){

	//
	//calculate pulse width for 2 torsion motor
	//state machine

	if(torsion >=1000 && torsion <= 2000){
		//Calcul
		C = torsion;
		D = torsion;

		//set PWM motor value
		TIM3->CCR3 = C;
		TIM3->CCR4 = D;
	}

}




void kinematic_bascule(uint16_t inclinaison_pulse){

	//
	//calculate pulse width for 2 bascule motor
	//state machine

	if((inclinaison_pulse <= 1500) && (inclinaison_pulse >= 1000)){

		//calcul
		A = 1500 - (1500-inclinaison_pulse) * 3;
		B = inclinaison_pulse;

		if(A<1000){
			A = 1000;
		}

		TIM3->CCR1 = A;
		TIM3->CCR2 = B;

	}else if((inclinaison_pulse <= 2000) && (inclinaison_pulse >= 1500)){ // 1650 = 78 deg

		//Calcul
		B = 1500 + (inclinaison_pulse - 1500)*3;
		A = inclinaison_pulse;

		if(B>2000) {
			B = 2000;
		}

		//set PWM motor value
		TIM3->CCR2 = B;
		TIM3->CCR1 = A;

	}else {

	}

}


float map(float x, float in_min, float in_max, float out_min, float out_max) {

  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

/*
 * 	Clock configuration for the Nucleo STM32F303K8 board
 *
 * 	Default solder bridges configuration is for HSI (HSE is not connected)
 * 	You can change this by swapping solder bridges SB4 and SB6 (see Nucleo User manual)
 *
 * 	HSI clock configuration provides :
 * 	- SYSCLK, AHB	-> 64MHz
 * 	- APB2			-> 64MHz
 * 	- APB1			-> 32MHz (periph) 64MHz (timers)
 *
 * 	HSE clock configuration from ST-Link 8MHz MCO provides :
 * 	- SYSCLK, AHB	-> 72MHz
 * 	- APB2			-> 72MHz
 * 	- APB1			-> 36MHz (periph) 72MHz (timers)
 *
 * 	Select configuration by setting one of these symbol in your build configuration
 * 	- USE_HSI
 * 	- USE_HSE
 *
 */


#ifdef USE_HSI

static uint8_t SystemClock_Config()
{
	uint32_t	status;
	uint32_t	timeout = 0;

	// Start 8MHz HSI (it should be already started at power on)
	RCC->CR |= RCC_CR_HSION;

	// Wait until HSI is stable
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_HSIRDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (1);	// HSI error


	// Configure Flash latency according to the speed (2WS)
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
	FLASH->ACR |= 0x02 <<0;

	// Set HSI as PLL input
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2;	// 4MHz from HSI

	// Configure the main PLL
	#define PLL_MUL		16					// 4MHz HSI to 64MHz
	RCC->CFGR |= (PLL_MUL-2) <<18;

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;

	// Configure AHB/APB prescalers
	// AHB  Prescaler = /1	-> 64 MHz
	// APB1 Prescaler = /2  -> 32/64 MHz
	// APB2 Prescaler = /1  -> 64 MHz
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;

	// Wait until PLL is ready
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_PLLRDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (2);	// PLL error


	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;

	// Wait until PLL is switched on
	timeout = 1000;

	do
	{
		status = RCC->CFGR & RCC_CFGR_SWS;
		timeout--;
	} while ((status != RCC_CFGR_SWS_PLL) && (timeout > 0));

	if (timeout == 0) return (3);	// SW error

	// Update System core clock
	SystemCoreClockUpdate();
	return (0);
}

#endif


#ifdef USE_HSE

static uint8_t SystemClock_Config()
{
	uint32_t	status;
	uint32_t	timeout;

	// Start HSE
	RCC->CR |= RCC_CR_HSEBYP;
	RCC->CR |= RCC_CR_HSEON;

	// Wait until HSE is ready
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_HSERDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (1); 	// HSE error


	// Configure Flash latency according to the speed (2WS)
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
	FLASH->ACR |= 0x02 <<0;

	// Configure the main PLL
	#define PLL_MUL		9	// 8MHz HSE to 72MHz
	RCC->CFGR |= (PLL_MUL-2) <<18;

	// Set HSE as PLL input
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE_PREDIV;

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;

	// Configure AHB/APB prescalers
	// AHB  Prescaler = /1	-> 72 MHz
	// APB1 Prescaler = /2  -> 36/72 MHz
	// APB2 Prescaler = /1  -> 72 MHz
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;

	// Wait until PLL is ready
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_PLLRDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (2); 	// PLL error


	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;

	// Wait until PLL is switched on
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_PLLRDY;
		timeout--;
	} while ((status != RCC_CFGR_SWS_PLL) && (timeout > 0));

	if (timeout == 0) return (3); 	// SW error


	// Update System core clock
	SystemCoreClockUpdate();
	return (0);
}

#endif
